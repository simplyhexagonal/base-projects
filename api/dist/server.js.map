{
  "version": 3,
  "sources": ["../node_modules/.pnpm/dotenv@10.0.0/node_modules/dotenv/lib/main.js", "../src/index.ts", "../src/routes/health-check/index.ts", "../src/routes/secret/handlers.ts", "../src/routes/secret/index.ts", "../src/routes/index.ts"],
  "sourcesContent": ["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\nfunction resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n", "require('dotenv').config();\nimport os from 'os';\n\nimport fastify from 'fastify';\nimport MonoContext from '@simplyhexagonal/mono-context';\nimport Logger from '@simplyhexagonal/logger';\n\nimport routes from './routes';\n\n// @ts-ignore\nimport { version, name } from '../package.json';\n\nconst {\n  PORT,\n  HOST,\n  CLUSTER_REGION,\n  CLUSTER_TYPE,\n  SECRET_TOKEN,\n} = process.env;\n\nconst logger = new Logger({\n  appIdentifiers: {\n    region: CLUSTER_REGION,\n    clusterType: CLUSTER_TYPE,\n    hostname: os.hostname(),\n    app: name,\n  },\n});\n\nMonoContext.setState({\n  logger,\n  version,\n  secret: null,\n});\n\nconst main = async () => {\n  const server = fastify({\n    logger: false,\n  });\n\n  await server.register((instance, opts, next) => {\n    instance.addHook('preValidation', ({headers}, reply, done) => {\n      if (headers.authorization !== `Bearer ${SECRET_TOKEN}`) {\n        reply.status(401).send('');\n      }\n\n      done();\n    });\n\n    // authenticated routes\n    routes.authRoutes.forEach((r) => instance.route(r));\n\n    next();\n  });\n\n  await server.register((instance, opts, next) => {\n    // non-authenticated routes\n    routes.openRoutes.forEach((r) => instance.route(r));\n\n    next();\n  });\n\n  const serverAddress = await server.listen(PORT || '5000', HOST);\n\n  logger.all(`Server successfully started on: ${serverAddress}`);\n};\n\nmain();\n", "import MonoContext from '@simplyhexagonal/mono-context';\n\nimport { RouteOptions } from \"fastify\";\n\nconst healthCheckRoute: RouteOptions = {\n  method: 'GET',\n  url: '/health-check',\n  handler: async () => ({\n    appVersion: MonoContext.getStateValue('version'),\n    status: 'ok',\n    uptime: process.uptime(),\n  }),\n};\n\nexport default healthCheckRoute;\n", "import MonoContext from '@simplyhexagonal/mono-context';\nimport { RouteOptions } from 'fastify';\n\nexport const updateSecret: RouteOptions['handler'] = async ({body}) => {\n  const logger = MonoContext.getStateValue('logger');\n  const prevSecret = MonoContext.getStateValue('secret');\n\n  logger.debug('Received body:', body);\n\n  MonoContext.setState({\n    secret: ((body as any) || {}).secret || null,\n  });\n\n  return {\n    prevSecret,\n    secret: MonoContext.getStateValue('secret'),\n  };\n};\n\nexport const readSecret: RouteOptions['handler'] = async ({}, reply) => {\n  return {\n    secret: MonoContext.getStateValue('secret'),\n  };\n};\n", "import { RouteOptions } from 'fastify';\n\nimport {\n  updateSecret,\n  readSecret,\n} from './handlers';\n\nconst updateSecretRoute: RouteOptions = {\n  method: 'POST',\n  url: '/secret',\n  handler: updateSecret,\n  constraints: {\n    mustAuth: true,\n  },\n};\n\nconst readSecretRoute: RouteOptions = {\n  method: 'GET',\n  url: '/secret',\n  handler: readSecret,\n  constraints: {\n    mustAuth: true,\n  },\n};\n\nexport default [\n  updateSecretRoute,\n  readSecretRoute,\n];\n", "import { RouteOptions } from 'fastify';\n\nimport healthCheckRoute from './health-check';\nimport secretRoutes from './secret';\n\nexport default [\n  healthCheckRoute,\n  ...secretRoutes,\n].reduce((a, b) => {\n  const {\n    constraints,\n    ...definiton\n  } = b;\n\n  if ((constraints || {}).mustAuth) {\n    a.authRoutes.push(definiton);\n  } else {\n    a.openRoutes.push(definiton);\n  }\n\n  return a;\n}, {\n  openRoutes: [] as RouteOptions[],\n  authRoutes: [] as RouteOptions[],\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAuBA,QAAM,KAAK,QAAQ;AACnB,QAAM,OAAO,QAAQ;AACrB,QAAM,MAAK,QAAQ;AAEnB,iBAAc,SAAuB;AACnC,cAAQ,IAAI,mBAAmB;AAAA;AAGjC,QAAM,UAAU;AAChB,QAAM,iBAAiB;AACvB,QAAM,cAAc;AACpB,QAAM,iBAAiB;AAGvB,mBAAgB,KAA4B,SAA6D;AACvG,YAAM,QAAQ,QAAQ,WAAW,QAAQ;AACzC,YAAM,MAAM;AAGZ,UAAI,WAAW,MAAM,gBAAgB,QAAQ,SAAU,MAAM,KAAK;AAEhE,cAAM,cAAc,KAAK,MAAM;AAE/B,YAAI,eAAe,MAAM;AACvB,gBAAM,MAAM,YAAY;AAExB,cAAI,MAAO,YAAY,MAAM;AAC7B,gBAAM,MAAM,IAAI,SAAS;AACzB,gBAAM,iBAAiB,IAAI,OAAO,OAAO,IAAI,SAAS;AACtD,gBAAM,iBAAiB,IAAI,OAAO,OAAO,IAAI,SAAS;AAGtD,cAAI,kBAAkB,gBAAgB;AACpC,kBAAM,IAAI,UAAU,GAAG;AAGvB,gBAAI,gBAAgB;AAClB,oBAAM,IAAI,QAAQ,aAAa;AAAA;AAAA,iBAE5B;AAEL,kBAAM,IAAI;AAAA;AAGZ,cAAI,OAAO;AAAA,mBACF,OAAO;AAChB,cAAI,iDAAiD,MAAM,MAAM;AAAA;AAAA;AAIrE,aAAO;AAAA;AAGT,yBAAsB,SAAS;AAC7B,aAAO,QAAQ,OAAO,MAAM,KAAK,KAAK,IAAG,WAAW,QAAQ,MAAM,MAAM;AAAA;AAI1E,oBAAiB,SAA+D;AAC9E,UAAI,aAAa,KAAK,QAAQ,QAAQ,OAAO;AAC7C,UAAI,WAAyB;AAC7B,UAAI,QAAQ;AAEZ,UAAI,SAAS;AACX,YAAI,QAAQ,QAAQ,MAAM;AACxB,uBAAa,YAAY,QAAQ;AAAA;AAEnC,YAAI,QAAQ,YAAY,MAAM;AAC5B,qBAAW,QAAQ;AAAA;AAErB,YAAI,QAAQ,SAAS,MAAM;AACzB,kBAAQ;AAAA;AAAA;AAIZ,UAAI;AAEF,cAAM,SAAS,MAAM,GAAG,aAAa,YAAY,EAAE,aAAa,EAAE;AAElE,eAAO,KAAK,QAAQ,QAAQ,SAAU,KAAK;AACzC,cAAI,CAAC,OAAO,UAAU,eAAe,KAAK,QAAQ,KAAK,MAAM;AAC3D,oBAAQ,IAAI,OAAO,OAAO;AAAA,qBACjB,OAAO;AAChB,gBAAI,IAAI;AAAA;AAAA;AAIZ,eAAO,EAAE;AAAA,eACF,GAAP;AACA,eAAO,EAAE,OAAO;AAAA;AAAA;AAIpB,YAAO,QAAQ,SAAS;AACxB,YAAO,QAAQ,QAAQ;AAAA;AAAA;;;ACpHvB,gBAAe;AAEf,qBAAoB;AACpB,2BAAwB;AACxB,oBAAmB;;;ACLnB,0BAAwB;AAIxB,IAAM,mBAAiC;AAAA,EACrC,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,SAAS,YAAa;AAAA,IACpB,YAAY,4BAAY,cAAc;AAAA,IACtC,QAAQ;AAAA,IACR,QAAQ,QAAQ;AAAA;AAAA;AAIpB,IAAO,uBAAQ;;;ACdf,2BAAwB;AAGjB,IAAM,eAAwC,OAAO,EAAC,WAAU;AACrE,QAAM,UAAS,6BAAY,cAAc;AACzC,QAAM,aAAa,6BAAY,cAAc;AAE7C,UAAO,MAAM,kBAAkB;AAE/B,+BAAY,SAAS;AAAA,IACnB,QAAU,SAAgB,IAAI,UAAU;AAAA;AAG1C,SAAO;AAAA,IACL;AAAA,IACA,QAAQ,6BAAY,cAAc;AAAA;AAAA;AAI/B,IAAM,aAAsC,OAAO,IAAI,UAAU;AACtE,SAAO;AAAA,IACL,QAAQ,6BAAY,cAAc;AAAA;AAAA;;;ACdtC,IAAM,oBAAkC;AAAA,EACtC,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA;AAAA;AAId,IAAM,kBAAgC;AAAA,EACpC,QAAQ;AAAA,EACR,KAAK;AAAA,EACL,SAAS;AAAA,EACT,aAAa;AAAA,IACX,UAAU;AAAA;AAAA;AAId,IAAO,iBAAQ;AAAA,EACb;AAAA,EACA;AAAA;;;ACtBF,IAAO,iBAAQ;AAAA,EACb;AAAA,EACA,GAAG;AAAA,EACH,OAAO,CAAC,GAAG,MAAM;AACjB,QAAM;AAAA,IACJ;AAAA,OACG;AAAA,MACD;AAEJ,MAAK,gBAAe,IAAI,UAAU;AAChC,MAAE,WAAW,KAAK;AAAA,SACb;AACL,MAAE,WAAW,KAAK;AAAA;AAGpB,SAAO;AAAA,GACN;AAAA,EACD,YAAY;AAAA,EACZ,YAAY;AAAA;;;;;;;AJvBd,eAAkB;AAYlB,IAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,IACE,QAAQ;AAEZ,IAAM,SAAS,IAAI,sBAAO;AAAA,EACxB,gBAAgB;AAAA,IACd,QAAQ;AAAA,IACR,aAAa;AAAA,IACb,UAAU,kBAAG;AAAA,IACb,KAAK;AAAA;AAAA;AAIT,6BAAY,SAAS;AAAA,EACnB;AAAA,EACA;AAAA,EACA,QAAQ;AAAA;AAGV,IAAM,OAAO,YAAY;AACvB,QAAM,SAAS,4BAAQ;AAAA,IACrB,QAAQ;AAAA;AAGV,QAAM,OAAO,SAAS,CAAC,UAAU,MAAM,SAAS;AAC9C,aAAS,QAAQ,iBAAiB,CAAC,EAAC,WAAU,OAAO,SAAS;AAC5D,UAAI,QAAQ,kBAAkB,UAAU,gBAAgB;AACtD,cAAM,OAAO,KAAK,KAAK;AAAA;AAGzB;AAAA;AAIF,mBAAO,WAAW,QAAQ,CAAC,MAAM,SAAS,MAAM;AAEhD;AAAA;AAGF,QAAM,OAAO,SAAS,CAAC,UAAU,MAAM,SAAS;AAE9C,mBAAO,WAAW,QAAQ,CAAC,MAAM,SAAS,MAAM;AAEhD;AAAA;AAGF,QAAM,gBAAgB,MAAM,OAAO,OAAO,QAAQ,QAAQ;AAE1D,SAAO,IAAI,mCAAmC;AAAA;AAGhD;",
  "names": []
}
